{"version":3,"sources":["../../server/controllers/MealController.js"],"names":["MealController","createMeal","req","res","checkBody","notEmpty","trim","requestErrors","validationErrors","status","json","errors","meal","mealId","body","mealName","price","description","mealAvatar","filterMeal","meals","filter","check","length","push","send","message","getMeal","getMealId","parseInt","params","result","m","sendStatus","editMeal","existingMeal","edit","removeMeal","currentMeal","splice"],"mappings":"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","file":"MealController.js","sourcesContent":["\n/** @class MealController\n *\n */\nclass MealController {\n  /**\n   * Create a new meal\n   *\n   * @static\n   * @param {Object} req - request object\n   * @param {Object} res - response object\n   * @returns {Object} res\n   *\n   */\n  static createMeal(req, res) {\n    req.checkBody('mealId', 'id is required').notEmpty().trim();\n    req.checkBody('mealName', 'Meal name is required').notEmpty().trim();\n    req.checkBody('price', 'Price of meal is required').notEmpty().trim();\n    req.checkBody('description', 'Meal description is required').notEmpty().trim();\n    req.checkBody('mealAvatar', 'Image of meal is required').notEmpty().trim();\n\n    const requestErrors = req.validationErrors();\n\n    if (requestErrors) {\n      res.status(400).json({\n        errors: requestErrors,\n      });\n    } else {\n      const meal = {\n        mealId: req.body.mealId,\n        mealName: req.body.mealName,\n        price: req.body.price,\n        description: req.body.description,\n        mealAvatar: req.body.mealAvatar,\n      };\n      const filterMeal = req.meals.filter(check =>\n        check.mealName === req.body.mealName || check.mealId === req.body.mealId);\n      if (filterMeal.length === 0) {\n        req.meals.push(meal);\n        res.status(201).json({ meal });\n      } else {\n        return res.status(400).send({ message: 'Meal or this Meal Id already exist' });\n      }\n    }\n  }\n\n  /**\n   * get meal\n   *\n   * @static\n   * @param {Object} req - request object\n   * @param {Object} res - response object\n   * @returns {Object} res\n   *\n   */\n  static getMeal(req, res) {\n    res.status(200).json({\n      meals: req.meals,\n    });\n  }\n  /**\n   * get meal by id\n   *\n   * @static\n   * @param {Object} req - request object\n   * @param {Object} res - response object\n   * @returns {Object} res\n   *\n   */\n  static getMealId(req, res) {\n    const mealId = parseInt(req.params.mealId, 10);\n    const result = req.meals.filter(m => m.mealId === mealId)[0];\n\n    if (!result) {\n      res.sendStatus(404);\n    } else {\n      res.send(result);\n    }\n  }\n  /**\n   *Edit meals by Id\n   *\n   * @static\n   * @param {Object} req - request object\n   * @param {Object} res - response object\n   * @returns {Object} res\n  */\n  static editMeal(req, res) {\n    const mealId = parseInt(req.params.mealId, 10);\n    const existingMeal = req.meals.filter(edit => edit.mealId === mealId)[0];\n\n    if (!existingMeal) {\n      res.sendStatus(404);\n    } else {\n      existingMeal.mealName = req.body.mealName;\n      existingMeal.price = req.body.price;\n      existingMeal.description = req.body.description;\n      existingMeal.mealAvatar = req.body.mealAvatar;\n      res.sendStatus(204);\n    }\n  }\n  /**\n   *Edit meals by Id\n   *\n   * @static\n   * @param {Object} req - request object\n   * @param {Object} res - response object\n   * @returns {Object} res\n  */\n  static removeMeal(req, res) {\n    const mealId = parseInt(req.params.mealId, 10);\n    const currentMeal = req.meals.filter(check => check.mealId === mealId)[0];\n\n    if (!currentMeal) {\n      return res.sendStatus(404);\n    }\n    req.meals = req.meals.splice(currentMeal, 1);\n    res.sendStatus(204);\n  }\n}\n\nexport default MealController;\n"]}