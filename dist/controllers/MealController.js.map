{"version":3,"sources":["../../server/controllers/MealController.js"],"names":["MealController","createMeal","req","res","checkBody","notEmpty","trim","requestErrors","validationErrors","status","json","errors","meal","id","body","mealId","mealName","price","description","mealAvatar","filterMeal","meals","filter","check","length","push","send","message","error","sendStatus","getMeal","getMealId","parseInt","params","result","m","editMeal","existingMeal","edit","setHeader","removeMeal","currentMeal","splice"],"mappings":";;;;;;AACA;;;AAGA,MAAMA,cAAN,CAAqB;AACnB;;;;;;;;;AASA,SAAOC,UAAP,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA4B;AAC1B,QAAI;AACFD,UAAIE,SAAJ,CAAc,QAAd,EAAwB,gBAAxB,EAA0CC,QAA1C,GAAqDC,IAArD;AACAJ,UAAIE,SAAJ,CAAc,UAAd,EAA0B,uBAA1B,EAAmDC,QAAnD,GAA8DC,IAA9D;AACAJ,UAAIE,SAAJ,CAAc,OAAd,EAAuB,2BAAvB,EAAoDC,QAApD,GAA+DC,IAA/D;AACAJ,UAAIE,SAAJ,CAAc,aAAd,EAA6B,8BAA7B,EAA6DC,QAA7D,GAAwEC,IAAxE;AACAJ,UAAIE,SAAJ,CAAc,YAAd,EAA4B,2BAA5B,EAAyDC,QAAzD,GAAoEC,IAApE;;AAEA,YAAMC,gBAAgBL,IAAIM,gBAAJ,EAAtB;;AAEA,UAAID,aAAJ,EAAmB;AACjBJ,YAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,kBAAQJ;AADW,SAArB;AAGD,OAJD,MAIO;AACL,cAAMK,OAAO;AACXC,cAAIX,IAAIY,IAAJ,CAASC,MADF;AAEXC,oBAAUd,IAAIY,IAAJ,CAASE,QAFR;AAGXC,iBAAOf,IAAIY,IAAJ,CAASG,KAHL;AAIXC,uBAAahB,IAAIY,IAAJ,CAASI,WAJX;AAKXC,sBAAYjB,IAAIY,IAAJ,CAASK;AALV,SAAb;AAOA,cAAMC,aAAalB,IAAImB,KAAJ,CAAUC,MAAV,CAAiBC,SAClCA,MAAMP,QAAN,KAAmBd,IAAIY,IAAJ,CAASE,QAA5B,IAAwCO,MAAMR,MAAN,KAAiBb,IAAIY,IAAJ,CAASC,MADjD,CAAnB;AAEA,YAAIK,WAAWI,MAAX,KAAsB,CAA1B,EAA6B;AAC3BtB,cAAImB,KAAJ,CAAUI,IAAV,CAAeb,IAAf;AACAT,cAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,IAAF,EAArB;AACD,SAHD,MAGO;AACL,iBAAOT,IAAIM,MAAJ,CAAW,GAAX,EAAgBiB,IAAhB,CAAqB,EAAEC,SAAS,oBAAX,EAArB,CAAP;AACD;AACF;AACF,KA9BD,CA8BE,OAAOC,KAAP,EAAc;AACdzB,UAAI0B,UAAJ,CAAe,GAAf;AACD;AACF;;AAED;;;;;;;;;AASA,SAAOC,OAAP,CAAe5B,GAAf,EAAoBC,GAApB,EAAyB;AACvBA,QAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBW,aAAOnB,IAAImB;AADQ,KAArB;AAGD;AACD;;;;;;;;;AASA,SAAOU,SAAP,CAAiB7B,GAAjB,EAAsBC,GAAtB,EAA2B;AACzB,UAAMY,SAASiB,SAAS9B,IAAI+B,MAAJ,CAAWlB,MAApB,EAA4B,EAA5B,CAAf;AACA,UAAMmB,SAAShC,IAAImB,KAAJ,CAAUC,MAAV,CAAiBa,KAAKA,EAAEpB,MAAF,KAAaA,MAAnC,EAA2C,CAA3C,CAAf;;AAEA,QAAI,CAACmB,MAAL,EAAa;AACX/B,UAAI0B,UAAJ,CAAe,GAAf;AACD,KAFD,MAEO;AACL1B,UAAIuB,IAAJ,CAASQ,MAAT;AACD;AACF;AACD;;;;;;;;AAQA,SAAOE,QAAP,CAAgBlC,GAAhB,EAAqBC,GAArB,EAA0B;AACxB,UAAMY,SAASiB,SAAS9B,IAAI+B,MAAJ,CAAWlB,MAApB,EAA4B,EAA5B,CAAf;AACA,UAAMsB,eAAenC,IAAImB,KAAJ,CAAUC,MAAV,CAAiBgB,QAAQA,KAAKvB,MAAL,KAAgBA,MAAzC,EAAiD,CAAjD,CAArB;;AAEA,QAAI,CAACsB,YAAL,EAAmB;AACjB,YAAMzB,OAAOV,IAAIY,IAAjB;AACAF,WAAKG,MAAL,GAAcA,MAAd;AACAb,UAAImB,KAAJ,CAAUI,IAAV,CAAeb,IAAf;AACAT,UAAIoC,SAAJ,CAAe,sBAAqBxB,MAAO,EAA3C;AACAZ,UAAI0B,UAAJ,CAAe,GAAf;AACD,KAND,MAMO;AACLQ,mBAAarB,QAAb,GAAwBd,IAAIY,IAAJ,CAASE,QAAjC;AACAqB,mBAAapB,KAAb,GAAqBf,IAAIY,IAAJ,CAASG,KAA9B;AACAoB,mBAAanB,WAAb,GAA2BhB,IAAIY,IAAJ,CAASI,WAApC;AACAf,UAAI0B,UAAJ,CAAe,GAAf;AACD;AACF;AACD;;;;;;;;AAQA,SAAOW,UAAP,CAAkBtC,GAAlB,EAAuBC,GAAvB,EAA4B;AAC1B,UAAMY,SAASiB,SAAS9B,IAAI+B,MAAJ,CAAWlB,MAApB,EAA4B,EAA5B,CAAf;AACA,UAAM0B,cAAcvC,IAAImB,KAAJ,CAAUC,MAAV,CAAiBC,SAASA,MAAMR,MAAN,KAAiBA,MAA3C,EAAmD,CAAnD,CAApB;;AAEA,QAAI,CAAC0B,WAAL,EAAkB;AAChB,aAAOtC,IAAI0B,UAAJ,CAAe,GAAf,CAAP;AACD;AACD3B,QAAImB,KAAJ,GAAYnB,IAAImB,KAAJ,CAAUqB,MAAV,CAAiBD,WAAjB,EAA8B,CAA9B,CAAZ;AACAtC,QAAI0B,UAAJ,CAAe,GAAf;AACD;AAzHkB;;kBA4HN7B,c","file":"MealController.js","sourcesContent":["\n/** @class MealController\n *\n */\nclass MealController {\n  /**\n   * Create a new meal\n   *\n   * @static\n   * @param {Object} req - request object\n   * @param {Object} res - response object\n   * @returns {Object} res\n   *\n   */\n  static createMeal(req, res) {\n    try {\n      req.checkBody('mealId', 'id is required').notEmpty().trim();\n      req.checkBody('mealName', 'Meal name is required').notEmpty().trim();\n      req.checkBody('price', 'Price of meal is required').notEmpty().trim();\n      req.checkBody('description', 'Meal description is required').notEmpty().trim();\n      req.checkBody('mealAvatar', 'Image of meal is required').notEmpty().trim();\n\n      const requestErrors = req.validationErrors();\n\n      if (requestErrors) {\n        res.status(400).json({\n          errors: requestErrors,\n        });\n      } else {\n        const meal = {\n          id: req.body.mealId,\n          mealName: req.body.mealName,\n          price: req.body.price,\n          description: req.body.description,\n          mealAvatar: req.body.mealAvatar,\n        };\n        const filterMeal = req.meals.filter(check =>\n          check.mealName === req.body.mealName || check.mealId === req.body.mealId);\n        if (filterMeal.length === 0) {\n          req.meals.push(meal);\n          res.status(201).json({ meal });\n        } else {\n          return res.status(400).send({ message: 'Meal already exist' });\n        }\n      }\n    } catch (error) {\n      res.sendStatus(500);\n    }\n  }\n\n  /**\n   * get meal\n   *\n   * @static\n   * @param {Object} req - request object\n   * @param {Object} res - response object\n   * @returns {Object} res\n   *\n   */\n  static getMeal(req, res) {\n    res.status(200).json({\n      meals: req.meals,\n    });\n  }\n  /**\n   * get meal by id\n   *\n   * @static\n   * @param {Object} req - request object\n   * @param {Object} res - response object\n   * @returns {Object} res\n   *\n   */\n  static getMealId(req, res) {\n    const mealId = parseInt(req.params.mealId, 10);\n    const result = req.meals.filter(m => m.mealId === mealId)[0];\n\n    if (!result) {\n      res.sendStatus(404);\n    } else {\n      res.send(result);\n    }\n  }\n  /**\n   *Edit meals by Id\n   *\n   * @static\n   * @param {Object} req - request object\n   * @param {Object} res - response object\n   * @returns {Object} res\n  */\n  static editMeal(req, res) {\n    const mealId = parseInt(req.params.mealId, 10);\n    const existingMeal = req.meals.filter(edit => edit.mealId === mealId)[0];\n\n    if (!existingMeal) {\n      const meal = req.body;\n      meal.mealId = mealId;\n      req.meals.push(meal);\n      res.setHeader(`Location, /api/v1/ ${mealId}`);\n      res.sendStatus(201);\n    } else {\n      existingMeal.mealName = req.body.mealName;\n      existingMeal.price = req.body.price;\n      existingMeal.description = req.body.description;\n      res.sendStatus(204);\n    }\n  }\n  /**\n   *Edit meals by Id\n   *\n   * @static\n   * @param {Object} req - request object\n   * @param {Object} res - response object\n   * @returns {Object} res\n  */\n  static removeMeal(req, res) {\n    const mealId = parseInt(req.params.mealId, 10);\n    const currentMeal = req.meals.filter(check => check.mealId === mealId)[0];\n\n    if (!currentMeal) {\n      return res.sendStatus(404);\n    }\n    req.meals = req.meals.splice(currentMeal, 1);\n    res.sendStatus(204);\n  }\n}\n\nexport default MealController;\n"]}