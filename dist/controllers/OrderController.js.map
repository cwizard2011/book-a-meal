{"version":3,"sources":["../../server/controllers/OrderController.js"],"names":["OrderController","createOrder","req","res","checkBody","notEmpty","trim","requestErrors","validationErrors","status","json","errors","order","orderId","body","customerId","mealName","total","filterOrder","orders","filter","check","length","push","send","message","error","sendStatus","getOrder","editOrder","parseInt","params","existingOrder","edit","setHeader"],"mappings":";;;;;;AACA;;;AAGA,MAAMA,eAAN,CAAsB;AACpB;;;;;;;;;AASA,SAAOC,WAAP,CAAmBC,GAAnB,EAAwBC,GAAxB,EAA6B;AAC3B,QAAI;AACFD,UAAIE,SAAJ,CAAc,SAAd,EAAyB,sBAAzB,EAAiDC,QAAjD,GAA4DC,IAA5D;AACAJ,UAAIE,SAAJ,CAAc,YAAd,EAA4B,yBAA5B,EAAuDC,QAAvD,GAAkEC,IAAlE;AACAJ,UAAIE,SAAJ,CAAc,UAAd,EAA0B,0BAA1B,EAAsDC,QAAtD,GAAiEC,IAAjE;AACAJ,UAAIE,SAAJ,CAAc,OAAd,EAAuB,qCAAvB,EAA8DC,QAA9D,GAAyEC,IAAzE;;AAEA,YAAMC,gBAAgBL,IAAIM,gBAAJ,EAAtB;;AAEA,UAAID,aAAJ,EAAmB;AACjBJ,YAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,kBAAQJ;AADW,SAArB;AAGD,OAJD,MAIO;AACL,cAAMK,QAAQ;AACZC,mBAASX,IAAIY,IAAJ,CAASD,OADN;AAEZE,sBAAYb,IAAIY,IAAJ,CAASC,UAFT;AAGZC,oBAAUd,IAAIY,IAAJ,CAASE,QAHP;AAIZC,iBAAOf,IAAIY,IAAJ,CAASG;AAJJ,SAAd;AAMA,cAAMC,cAAchB,IAAIiB,MAAJ,CAAWC,MAAX,CAAkBC,SACpCA,MAAMR,OAAN,KAAkBX,IAAIY,IAAJ,CAASD,OAA3B,IAAsCQ,MAAMN,UAAN,KAAqBb,IAAIY,IAAJ,CAASC,UADlD,CAApB;AAEA,YAAIG,YAAYI,MAAZ,KAAuB,CAA3B,EAA8B;AAC5BpB,cAAIiB,MAAJ,CAAWI,IAAX,CAAgBX,KAAhB;AACAT,cAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,KAAF,EAArB;AACD,SAHD,MAGO;AACL,iBAAOT,IAAIM,MAAJ,CAAW,GAAX,EAAgBe,IAAhB,CAAqB,EAAEC,SAAS,wBAAX,EAArB,CAAP;AACD;AACF;AACF,KA5BD,CA4BE,OAAOC,KAAP,EAAc;AACdvB,UAAIwB,UAAJ,CAAe,GAAf;AACD;AACF;;AAED;;;;;;;;;AASA,SAAOC,QAAP,CAAgB1B,GAAhB,EAAqBC,GAArB,EAA0B;AACxBA,QAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBS,cAAQjB,IAAIiB;AADO,KAArB;AAGD;AACD;;;;;;;;;AASA,SAAOU,SAAP,CAAiB3B,GAAjB,EAAsBC,GAAtB,EAA2B;AACzB,UAAMU,UAAUiB,SAAS5B,IAAI6B,MAAJ,CAAWlB,OAApB,EAA6B,EAA7B,CAAhB;AACA,UAAMmB,gBAAgB9B,IAAIiB,MAAJ,CAAWC,MAAX,CAAkBa,QAAQA,KAAKpB,OAAL,KAAiBA,OAA3C,EAAoD,CAApD,CAAtB;;AAEA,QAAI,CAACmB,aAAL,EAAoB;AAClB,YAAMpB,QAAQV,IAAIY,IAAlB;AACAF,YAAMC,OAAN,GAAgBA,OAAhB;AACAX,UAAIiB,MAAJ,CAAWI,IAAX,CAAgBX,KAAhB;AACAT,UAAI+B,SAAJ,CAAe,sBAAqBrB,OAAQ,EAA5C;AACAV,UAAIwB,UAAJ,CAAe,GAAf;AACD,KAND,MAMO;AACLK,oBAAchB,QAAd,GAAyBd,IAAIY,IAAJ,CAASE,QAAlC;AACAgB,oBAAcf,KAAd,GAAsBf,IAAIY,IAAJ,CAASG,KAA/B;AACAd,UAAIwB,UAAJ,CAAe,GAAf;AACD;AACF;AAlFmB;;kBAqFP3B,e","file":"OrderController.js","sourcesContent":["\n/** @class OrderController\n *\n */\nclass OrderController {\n  /**\n   * Create a new order\n   *\n   * @static\n   * @param {Object} req - request object\n   * @param {Object} res - response object\n   * @returns {Object} res\n   *\n   */\n  static createOrder(req, res) {\n    try {\n      req.checkBody('orderId', 'Order id is required').notEmpty().trim();\n      req.checkBody('customerId', 'Customer Id is required').notEmpty().trim();\n      req.checkBody('mealName', 'Name of meal is required').notEmpty().trim();\n      req.checkBody('total', 'Order total description is required').notEmpty().trim();\n\n      const requestErrors = req.validationErrors();\n\n      if (requestErrors) {\n        res.status(400).json({\n          errors: requestErrors,\n        });\n      } else {\n        const order = {\n          orderId: req.body.orderId,\n          customerId: req.body.customerId,\n          mealName: req.body.mealName,\n          total: req.body.total,\n        };\n        const filterOrder = req.orders.filter(check =>\n          check.orderId === req.body.orderId && check.customerId === req.body.customerId);\n        if (filterOrder.length === 0) {\n          req.orders.push(order);\n          res.status(201).json({ order });\n        } else {\n          return res.status(400).send({ message: 'Order Id already exist' });\n        }\n      }\n    } catch (error) {\n      res.sendStatus(500);\n    }\n  }\n\n  /**\n   * get order\n   *\n   * @static\n   * @param {Object} req - request object\n   * @param {Object} res - response object\n   * @returns {Object} res\n   *\n   */\n  static getOrder(req, res) {\n    res.status(200).json({\n      orders: req.orders,\n    });\n  }\n  /**\n   * Edit current order\n   *\n   * @static\n   * @param {Object} req - request object\n   * @param {Object} res - response object\n   * @returns {Object} res\n   *\n   */\n  static editOrder(req, res) {\n    const orderId = parseInt(req.params.orderId, 10);\n    const existingOrder = req.orders.filter(edit => edit.orderId === orderId)[0];\n\n    if (!existingOrder) {\n      const order = req.body;\n      order.orderId = orderId;\n      req.orders.push(order);\n      res.setHeader(`Location, /api/v1/ ${orderId}`);\n      res.sendStatus(201);\n    } else {\n      existingOrder.mealName = req.body.mealName;\n      existingOrder.total = req.body.total;\n      res.sendStatus(204);\n    }\n  }\n}\n\nexport default OrderController;\n"]}