{"version":3,"sources":["../../server/controllers/MenuController.js"],"names":["MenuController","createMenu","req","res","checkBody","notEmpty","trim","requestErrors","validationErrors","status","json","errors","body","menuName","sendStatus","sanitizeBody","escape","menu","date","meals","menus","push","error","getMenu"],"mappings":";;;;;AAAA;AACA;;;AAGA,MAAMA,cAAN,CAAqB;AACnB;;;;;;;;;AASA,SAAOC,UAAP,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA4B;AAC1B,QAAI;AACFD,UAAIE,SAAJ,CAAc,UAAd,EAA0B,uBAA1B,EAAmDC,QAAnD,GAA8DC,IAA9D;AACAJ,UAAIE,SAAJ,CAAc,OAAd,EAAuB,4BAAvB,EAAqDC,QAArD,GAAgEC,IAAhE;AACAJ,UAAIE,SAAJ,CAAc,MAAd,EAAsB,0BAAtB,EAAkDC,QAAlD,GAA6DC,IAA7D;;AAEA,YAAMC,gBAAgBL,IAAIM,gBAAJ,EAAtB;;AAEA,UAAID,aAAJ,EAAmB;AACjBJ,YAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,kBAAQJ;AADW,SAArB;AAGD,OAJD,MAIO,IAAI,OAAOL,IAAIU,IAAJ,CAASC,QAAhB,KAA6B,QAAjC,EAA2C;AAChDV,YAAIW,UAAJ,CAAe,GAAf;AACD,OAFM,MAEA;AACLZ,YAAIa,YAAJ,CAAiB,UAAjB,EAA6BC,MAA7B;AACA,cAAMC,OAAO;AACXJ,oBAAUX,IAAIU,IAAJ,CAASC,QADR;AAEXK,gBAAMhB,IAAIU,IAAJ,CAASM,IAFJ;AAGXC,iBAAO,CAACjB,IAAIU,IAAJ,CAASO,KAAV;AAHI,SAAb;AAKAjB,YAAIkB,KAAJ,CAAUC,IAAV,CAAeJ,IAAf;AACAd,YAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEO,IAAF,EAArB;AACD;AACF,KAvBD,CAuBE,OAAOK,KAAP,EAAc;AACdnB,UAAIW,UAAJ,CAAe,GAAf;AACD;AACF;AACD;;;;;;;;;AASA,SAAOS,OAAP,CAAerB,GAAf,EAAoBC,GAApB,EAAyB;AACvBA,QAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBU,aAAOlB,IAAIkB;AADQ,KAArB;AAGD;AAnDkB;kBAqDNpB,c","file":"MenuController.js","sourcesContent":["// import menus from '../data/menus';\n/**\n * @class MenuController\n */\nclass MenuController {\n  /**\n   * Create a new menu\n   *\n   * @static\n   * @param {Object} req - request object\n   * @param {Object} res - response object\n   * @returns {Object} res\n   *\n   */\n  static createMenu(req, res) {\n    try {\n      req.checkBody('menuName', 'Menu name is required').notEmpty().trim();\n      req.checkBody('meals', 'Meals on menu are required').notEmpty().trim();\n      req.checkBody('date', 'Date of menu is required').notEmpty().trim();\n\n      const requestErrors = req.validationErrors();\n\n      if (requestErrors) {\n        res.status(400).json({\n          errors: requestErrors,\n        });\n      } else if (typeof req.body.menuName !== 'string') {\n        res.sendStatus(400);\n      } else {\n        req.sanitizeBody('menuName').escape();\n        const menu = {\n          menuName: req.body.menuName,\n          date: req.body.date,\n          meals: [req.body.meals],\n        };\n        req.menus.push(menu);\n        res.status(201).json({ menu });\n      }\n    } catch (error) {\n      res.sendStatus(500);\n    }\n  }\n  /**\n   * Get menu\n   *\n   * @static\n   * @param {Object} req - request object\n   * @param {Object} res - response object\n   * @returns {Object} res\n   *\n   */\n  static getMenu(req, res) {\n    res.status(200).json({\n      menus: req.menus,\n    });\n  }\n}\nexport default MenuController;\n"]}