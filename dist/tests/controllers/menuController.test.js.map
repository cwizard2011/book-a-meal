{"version":3,"sources":["../../../server/tests/controllers/menuController.test.js"],"names":["expect","describe","it","res","get","set","body","to","be","an","menus","post","send","errors","msg","equal","menu","have","a","property","meals"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,MAAM,EAAEA,MAAF,mBAAN;;AAEAC,SAAS,mBAAT,EAA8B,MAAM;AAClCC,KAAG,sBAAH,EAA2B,YAAY;AACrC,UAAMC,MAAM,MAAM,wCACfC,GADe,CACX,eADW,EAEfC,GAFe,CAEX,QAFW,EAED,kBAFC,EAGfL,MAHe,CAGR,GAHQ,CAAlB;AAIAA,WAAOG,IAAIG,IAAX,EAAiBC,EAAjB,CAAoBC,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAT,WAAOG,IAAIG,IAAJ,CAASI,KAAhB,EAAuBH,EAAvB,CAA0BC,EAA1B,CAA6BC,EAA7B,CAAgC,OAAhC;AACD,GAPD;AAQD,CATD;AAUAR,SAAS,oBAAT,EAA+B,MAAM;AACnCC,KAAG,+CAAH,EAAoD,YAAY;AAC9D,UAAM,wCACHS,IADG,CACE,eADF,EAEHN,GAFG,CAEC,QAFD,EAEW,kBAFX,EAGHO,IAHG,kBAIHZ,MAJG,CAII,GAJJ,CAAN;AAKD,GAND;AAOAE,KAAG,uCAAH,EAA4C,YAAY;AACtD,UAAMC,MAAM,MAAM,wCACfQ,IADe,CACV,eADU,EAEfN,GAFe,CAEX,QAFW,EAED,kBAFC,EAGfO,IAHe,kBAIfZ,MAJe,CAIR,GAJQ,CAAlB;;AAMAA,WAAOG,IAAIG,IAAJ,CAASO,MAAT,CAAgB,CAAhB,EAAmBC,GAA1B,EACGP,EADH,CACMQ,KADN,CACY,0BADZ;AAED,GATD;AAUAb,KAAG,4CAAH,EAAiD,YAAY;AAC3D,UAAMC,MAAM,MAAM,wCACfQ,IADe,CACV,eADU,EAEfN,GAFe,CAEX,QAFW,EAED,kBAFC,EAGfO,IAHe,kBAIfZ,MAJe,CAIR,GAJQ,CAAlB;;AAMAA,WAAOG,IAAIG,IAAJ,CAASO,MAAT,CAAgB,CAAhB,EAAmBC,GAA1B,EACGP,EADH,CACMQ,KADN,CACY,uBADZ;AAED,GATD;AAUAb,KAAG,sCAAH,EAA2C,YAAY;AACrD,UAAMC,MAAM,MAAM,wCACfQ,IADe,CACV,eADU,EAEfN,GAFe,CAEX,QAFW,EAED,kBAFC,EAGfO,IAHe,kBAIfZ,MAJe,CAIR,GAJQ,CAAlB;;AAMAA,WAAOG,IAAIG,IAAJ,CAASO,MAAT,CAAgB,CAAhB,EAAmBC,GAA1B,EACGP,EADH,CACMQ,KADN,CACY,4BADZ;AAED,GATD;AAUAb,KAAG,wBAAH,EAA6B,YAAY;AACvC,UAAMC,MAAM,MAAM,wCACfQ,IADe,CACV,eADU,EAEfN,GAFe,CAEX,QAFW,EAED,kBAFC,EAGfO,IAHe,eAIfZ,MAJe,CAIR,GAJQ,CAAlB;AAKAA,WAAOG,IAAIG,IAAX,EAAiBC,EAAjB,CAAoBC,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAT,WAAOG,IAAIG,IAAJ,CAASU,IAAhB,EAAsBT,EAAtB,CAAyBU,IAAzB,CAA8BC,CAA9B,CAAgCC,QAAhC,CAAyC,UAAzC;AACAnB,WAAOG,IAAIG,IAAJ,CAASU,IAAhB,EAAsBT,EAAtB,CAAyBU,IAAzB,CAA8BC,CAA9B,CAAgCC,QAAhC,CAAyC,MAAzC;AACAnB,WAAOG,IAAIG,IAAJ,CAASU,IAAhB,EAAsBT,EAAtB,CAAyBU,IAAzB,CAA8BC,CAA9B,CAAgCC,QAAhC,CAAyC,OAAzC;AACAnB,WAAOG,IAAIG,IAAJ,CAASU,IAAT,CAAcI,KAArB,EAA4Bb,EAA5B,CAA+BC,EAA/B,CAAkCC,EAAlC,CAAqC,OAArC;AACD,GAXD;AAYD,CAlDD","file":"menuController.test.js","sourcesContent":["import chai from 'chai';\nimport request from 'supertest';\nimport app from '../../app';\nimport { valid, invalid1, invalid2, invalid3, invalid4 } from '../seedData/menus';\n\nconst { expect } = chai;\n\ndescribe('GET /api/v1/menus', () => {\n  it('should get all menus', async () => {\n    const res = await request(app)\n      .get('/api/v1/menus')\n      .set('Accept', 'application/json')\n      .expect(200);\n    expect(res.body).to.be.an('object');\n    expect(res.body.menus).to.be.an('array');\n  });\n});\ndescribe('POST /api/v1/menus', () => {\n  it('should not post a menu with invalid menu name', async () => {\n    await request(app)\n      .post('/api/v1/menus')\n      .set('Accept', 'application/json')\n      .send(invalid4)\n      .expect(400);\n  });\n  it('should not post a menu without a date', async () => {\n    const res = await request(app)\n      .post('/api/v1/menus')\n      .set('Accept', 'application/json')\n      .send(invalid1)\n      .expect(400);\n\n    expect(res.body.errors[0].msg)\n      .to.equal('Date of menu is required');\n  });\n  it('should not post a menu without a menu name', async () => {\n    const res = await request(app)\n      .post('/api/v1/menus')\n      .set('Accept', 'application/json')\n      .send(invalid2)\n      .expect(400);\n\n    expect(res.body.errors[0].msg)\n      .to.equal('Menu name is required');\n  });\n  it('should not post a menu without meals', async () => {\n    const res = await request(app)\n      .post('/api/v1/menus')\n      .set('Accept', 'application/json')\n      .send(invalid3)\n      .expect(400);\n\n    expect(res.body.errors[0].msg)\n      .to.equal('Meals on menu are required');\n  });\n  it('should post a new menu', async () => {\n    const res = await request(app)\n      .post('/api/v1/menus')\n      .set('Accept', 'application/json')\n      .send(valid)\n      .expect(201);\n    expect(res.body).to.be.an('object');\n    expect(res.body.menu).to.have.a.property('menuName');\n    expect(res.body.menu).to.have.a.property('date');\n    expect(res.body.menu).to.have.a.property('meals');\n    expect(res.body.menu.meals).to.be.an('array');\n  });\n});\n"]}