{"version":3,"sources":["../../../server/tests/controllers/orderController.test.js"],"names":["expect","describe","it","res","get","set","body","to","be","an","orders","length","eql","post","send","errors","msg","equal","message","order","have","a","property","orderId","put"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,MAAM,EAAEA,MAAF,mBAAN;;AAEAC,SAAS,oBAAT,EAA+B,MAAM;AACnCC,KAAG,0BAAH,EAA+B,YAAY;AACzC,UAAMC,MAAM,MAAM,wCACfC,GADe,CACX,gBADW,EAEfC,GAFe,CAEX,QAFW,EAED,kBAFC,EAGfL,MAHe,CAGR,GAHQ,CAAlB;AAIAA,WAAOG,IAAIG,IAAX,EAAiBC,EAAjB,CAAoBC,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAT,WAAOG,IAAIG,IAAJ,CAASI,MAAhB,EAAwBH,EAAxB,CAA2BC,EAA3B,CAA8BC,EAA9B,CAAiC,OAAjC;AACAT,WAAOG,IAAIG,IAAJ,CAASI,MAAT,CAAgBC,MAAvB,EAA+BJ,EAA/B,CAAkCK,GAAlC,CAAsC,CAAtC;AACD,GARD;AASD,CAVD;AAWAX,SAAS,qBAAT,EAAgC,MAAM;AACpCC,KAAG,qCAAH,EAA0C,YAAY;AACpD,UAAMC,MAAM,MAAM,wCACfU,IADe,CACV,gBADU,EAEfR,GAFe,CAEX,QAFW,EAED,kBAFC,EAGfS,IAHe,kBAIfd,MAJe,CAIR,GAJQ,CAAlB;;AAMAA,WAAOG,IAAIG,IAAJ,CAASS,MAAT,CAAgB,CAAhB,EAAmBC,GAA1B,EACGT,EADH,CACMU,KADN,CACY,sBADZ;AAED,GATD;AAUAf,KAAG,8CAAH,EAAmD,YAAY;AAC7D,UAAMC,MAAM,MAAM,wCACfU,IADe,CACV,gBADU,EAEfR,GAFe,CAEX,QAFW,EAED,kBAFC,EAGfS,IAHe,kBAIfd,MAJe,CAIR,GAJQ,CAAlB;;AAMAA,WAAOG,IAAIG,IAAJ,CAASS,MAAT,CAAgB,CAAhB,EAAmBC,GAA1B,EACGT,EADH,CACMU,KADN,CACY,yBADZ;AAED,GATD;AAUAf,KAAG,4CAAH,EAAiD,YAAY;AAC3D,UAAMC,MAAM,MAAM,wCACfU,IADe,CACV,gBADU,EAEfR,GAFe,CAEX,QAFW,EAED,kBAFC,EAGfS,IAHe,kBAIfd,MAJe,CAIR,GAJQ,CAAlB;;AAMAA,WAAOG,IAAIG,IAAJ,CAASS,MAAT,CAAgB,CAAhB,EAAmBC,GAA1B,EACGT,EADH,CACMU,KADN,CACY,0BADZ;AAED,GATD;AAUAf,KAAG,wCAAH,EAA6C,YAAY;AACvD,UAAMC,MAAM,MAAM,wCACfU,IADe,CACV,gBADU,EAEfR,GAFe,CAEX,QAFW,EAED,kBAFC,EAGfS,IAHe,kBAIfd,MAJe,CAIR,GAJQ,CAAlB;;AAMAA,WAAOG,IAAIG,IAAJ,CAASS,MAAT,CAAgB,CAAhB,EAAmBC,GAA1B,EACGT,EADH,CACMU,KADN,CACY,yBADZ;AAED,GATD;AAUAf,KAAG,mCAAH,EAAwC,YAAY;AAClD,UAAMC,MAAM,MAAM,wCACfU,IADe,CACV,gBADU,EAEfR,GAFe,CAEX,QAFW,EAED,kBAFC,EAGfS,IAHe,oBAIfd,MAJe,CAIR,GAJQ,CAAlB;;AAMAA,WAAOG,IAAIG,IAAJ,CAASY,OAAhB,EACGX,EADH,CACMU,KADN,CACY,qBADZ;AAED,GATD;AAUAf,KAAG,yBAAH,EAA8B,YAAY;AACxC,UAAMC,MAAM,MAAM,wCACfU,IADe,CACV,gBADU,EAEfR,GAFe,CAEX,QAFW,EAED,kBAFC,EAGfS,IAHe,mBAIfd,MAJe,CAIR,GAJQ,CAAlB;AAKAA,WAAOG,IAAIG,IAAX,EAAiBC,EAAjB,CAAoBC,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAT,WAAOG,IAAIG,IAAJ,CAASa,KAAhB,EAAuBZ,EAAvB,CAA0Ba,IAA1B,CAA+BC,CAA/B,CAAiCC,QAAjC,CAA0C,SAA1C;AACAtB,WAAOG,IAAIG,IAAJ,CAASa,KAAhB,EAAuBZ,EAAvB,CAA0Ba,IAA1B,CAA+BC,CAA/B,CAAiCC,QAAjC,CAA0C,YAA1C;AACAtB,WAAOG,IAAIG,IAAJ,CAASa,KAAhB,EAAuBZ,EAAvB,CAA0Ba,IAA1B,CAA+BC,CAA/B,CAAiCC,QAAjC,CAA0C,UAA1C;AACAtB,WAAOG,IAAIG,IAAJ,CAASa,KAAhB,EAAuBZ,EAAvB,CAA0Ba,IAA1B,CAA+BC,CAA/B,CAAiCC,QAAjC,CAA0C,OAA1C;AACD,GAXD;AAYApB,KAAG,yBAAH,EAA8B,YAAY;AACxC,UAAMC,MAAM,MAAM,wCACfU,IADe,CACV,gBADU,EAEfR,GAFe,CAEX,QAFW,EAED,kBAFC,EAGfS,IAHe,mBAIfd,MAJe,CAIR,GAJQ,CAAlB;AAKAA,WAAOG,IAAIG,IAAX,EAAiBC,EAAjB,CAAoBC,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAT,WAAOG,IAAIG,IAAJ,CAASa,KAAhB,EAAuBZ,EAAvB,CAA0Ba,IAA1B,CAA+BC,CAA/B,CAAiCC,QAAjC,CAA0C,SAA1C;AACAtB,WAAOG,IAAIG,IAAJ,CAASa,KAAhB,EAAuBZ,EAAvB,CAA0Ba,IAA1B,CAA+BC,CAA/B,CAAiCC,QAAjC,CAA0C,YAA1C;AACAtB,WAAOG,IAAIG,IAAJ,CAASa,KAAhB,EAAuBZ,EAAvB,CAA0Ba,IAA1B,CAA+BC,CAA/B,CAAiCC,QAAjC,CAA0C,UAA1C;AACAtB,WAAOG,IAAIG,IAAJ,CAASa,KAAhB,EAAuBZ,EAAvB,CAA0Ba,IAA1B,CAA+BC,CAA/B,CAAiCC,QAAjC,CAA0C,OAA1C;AACD,GAXD;AAYD,CA3ED;;AA6EArB,SAAS,0BAAT,EAAqC,MAAM;AACzCC,KAAG,4CAAH,EAAiD,YAAY;AAC3D,UAAMqB,UAAU,EAAhB;AACA,UAAM,wCACHC,GADG,CACE,kBAAiBD,OAAQ,EAD3B,EAEHlB,GAFG,CAEC,QAFD,EAEW,kBAFX,EAGHS,IAHG,mBAIHd,MAJG,CAII,GAJJ,CAAN;AAKD,GAPD;AAQAE,KAAG,kCAAH,EAAuC,YAAY;AACjD,UAAMqB,UAAU,CAAhB;AACA,UAAM,wCACHC,GADG,CACE,kBAAiBD,OAAQ,EAD3B,EAEHlB,GAFG,CAEC,QAFD,EAEW,kBAFX,EAGHS,IAHG,mBAIHd,MAJG,CAII,GAJJ,CAAN;AAKD,GAPD;AAQD,CAjBD","file":"orderController.test.js","sourcesContent":["import chai from 'chai';\nimport request from 'supertest';\nimport app from '../../app';\nimport { existOrder, newOrder1, newOrder2, invalid1, invalid2, invalid3, invalid4, editOrder } from '../seedData/order';\n\nconst { expect } = chai;\n\ndescribe('GET /api/v1/orders', () => {\n  it('should return all orders', async () => {\n    const res = await request(app)\n      .get('/api/v1/orders')\n      .set('Accept', 'application/json')\n      .expect(200);\n    expect(res.body).to.be.an('object');\n    expect(res.body.orders).to.be.an('array');\n    expect(res.body.orders.length).to.eql(2);\n  });\n});\ndescribe('POST /api/v1/orders', () => {\n  it('should not post an order with no Id', async () => {\n    const res = await request(app)\n      .post('/api/v1/orders')\n      .set('Accept', 'application/json')\n      .send(invalid1)\n      .expect(400);\n\n    expect(res.body.errors[0].msg)\n      .to.equal('Order id is required');\n  });\n  it('should not post an order with no customer id', async () => {\n    const res = await request(app)\n      .post('/api/v1/orders')\n      .set('Accept', 'application/json')\n      .send(invalid2)\n      .expect(400);\n\n    expect(res.body.errors[0].msg)\n      .to.equal('Customer Id is required');\n  });\n  it('should not post an order with no meal name', async () => {\n    const res = await request(app)\n      .post('/api/v1/orders')\n      .set('Accept', 'application/json')\n      .send(invalid3)\n      .expect(400);\n\n    expect(res.body.errors[0].msg)\n      .to.equal('Name of meal is required');\n  });\n  it('should not post an order with no total', async () => {\n    const res = await request(app)\n      .post('/api/v1/orders')\n      .set('Accept', 'application/json')\n      .send(invalid4)\n      .expect(400);\n\n    expect(res.body.errors[0].msg)\n      .to.equal('Order total is required');\n  });\n  it('should not post an existing order', async () => {\n    const res = await request(app)\n      .post('/api/v1/orders')\n      .set('Accept', 'application/json')\n      .send(existOrder)\n      .expect(400);\n\n    expect(res.body.message)\n      .to.equal('Order already exist');\n  });\n  it('should post a new order', async () => {\n    const res = await request(app)\n      .post('/api/v1/orders')\n      .set('Accept', 'application/json')\n      .send(newOrder1)\n      .expect(201);\n    expect(res.body).to.be.an('object');\n    expect(res.body.order).to.have.a.property('orderId');\n    expect(res.body.order).to.have.a.property('customerId');\n    expect(res.body.order).to.have.a.property('mealName');\n    expect(res.body.order).to.have.a.property('total');\n  });\n  it('should post a new order', async () => {\n    const res = await request(app)\n      .post('/api/v1/orders')\n      .set('Accept', 'application/json')\n      .send(newOrder2)\n      .expect(201);\n    expect(res.body).to.be.an('object');\n    expect(res.body.order).to.have.a.property('orderId');\n    expect(res.body.order).to.have.a.property('customerId');\n    expect(res.body.order).to.have.a.property('mealName');\n    expect(res.body.order).to.have.a.property('total');\n  });\n});\n\ndescribe('PUT /api/orders/:orderId', () => {\n  it('should not edit order if id does not exist', async () => {\n    const orderId = 18;\n    await request(app)\n      .put(`/api/v1/orders/${orderId}`)\n      .set('Accept', 'application/json')\n      .send(editOrder)\n      .expect(404);\n  });\n  it('should not edit order with valid', async () => {\n    const orderId = 1;\n    await request(app)\n      .put(`/api/v1/orders/${orderId}`)\n      .set('Accept', 'application/json')\n      .send(editOrder)\n      .expect(204);\n  });\n});\n"]}