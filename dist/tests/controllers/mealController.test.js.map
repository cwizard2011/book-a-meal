{"version":3,"sources":["../../../server/tests/controllers/mealController.test.js"],"names":["expect","describe","it","res","get","set","body","to","be","an","meals","length","eql","mealId","have","a","property","mealName","equal","description","mealAvatar","price","post","send","errors","msg","message","meal","put","delete"],"mappings":"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","file":"mealController.test.js","sourcesContent":["import chai from 'chai';\nimport request from 'supertest';\nimport app from '../../app';\nimport { meal, invalid1, invalid2, invalid3, invalid4, invalid5, existMeal1, existMeal2, newMeal } from '../seedData/meal';\n\n\nconst { expect } = chai;\n\ndescribe('GET /api/v1/meals', () => {\n  it('should return all meals', async () => {\n    const res = await request(app)\n      .get('/api/v1/meals')\n      .set('Accept', 'application/json')\n      .expect(200);\n    expect(res.body).to.be.an('object');\n    expect(res.body.meals).to.be.an('array');\n    expect(res.body.meals.length).to.eql(3);\n  });\n});\ndescribe('GET /api/v1/meals/:mealId', () => {\n  it('should not return meal with invalid id', async () => {\n    const mealId = 7;\n    await request(app)\n      .get(`/api/v1/meals/${mealId}`)\n      .set('Accept', 'application/json')\n      .expect(404);\n  });\n  it('should return meal with valid id', async () => {\n    const mealId = 2;\n    const res = await request(app)\n      .get(`/api/v1/meals/${mealId}`)\n      .set('Accept', 'application/json')\n      .expect(200);\n    expect(res.body).to.be.an('object');\n    expect(res.body).to.have.a.property('mealId');\n    expect(res.body.mealId).to.be.a('number');\n    expect(res.body).to.have.a.property('mealName');\n    expect(res.body.mealName).to.equal('Fried Rice, Salad and Beef');\n    expect(res.body).to.have.a.property('description');\n    expect(res.body.description).to\n      .equal('Hot fried rice with salad, salad cream and Beef with option of malt or wine');\n    expect(res.body).to.have.a.property('mealAvatar');\n    expect(res.body.mealAvatar).to.equal('imageurl2');\n    expect(res.body).to.have.a.property('price');\n    expect(res.body.price).to.equal('# 1300');\n  });\n});\ndescribe('POST /api/v1/meals', () => {\n  it('should not post a meal with no Id', async () => {\n    const res = await request(app)\n      .post('/api/v1/meals')\n      .set('Accept', 'application/json')\n      .send(invalid1)\n      .expect(400);\n\n    expect(res.body.errors[0].msg)\n      .to.equal('id is required');\n  });\n  it('should not post a meal with no meal name', async () => {\n    const res = await request(app)\n      .post('/api/v1/meals')\n      .set('Accept', 'application/json')\n      .send(invalid2)\n      .expect(400);\n\n    expect(res.body.errors[0].msg)\n      .to.equal('Meal name is required');\n  });\n  it('should not post a meal with no price', async () => {\n    const res = await request(app)\n      .post('/api/v1/meals')\n      .set('Accept', 'application/json')\n      .send(invalid3)\n      .expect(400);\n\n    expect(res.body.errors[0].msg)\n      .to.equal('Price of meal is required');\n  });\n  it('should not post a meal with no meal description', async () => {\n    const res = await request(app)\n      .post('/api/v1/meals')\n      .set('Accept', 'application/json')\n      .send(invalid4)\n      .expect(400);\n\n    expect(res.body.errors[0].msg)\n      .to.equal('Meal description is required');\n  });\n  it('should not post a meal with no meal avatar', async () => {\n    const res = await request(app)\n      .post('/api/v1/meals')\n      .set('Accept', 'application/json')\n      .send(invalid5)\n      .expect(400);\n\n    expect(res.body.errors[0].msg)\n      .to.equal('Image of meal is required');\n  });\n  it('should not post a meal with existing meal Id', async () => {\n    const res = await request(app)\n      .post('/api/v1/meals')\n      .set('Accept', 'application/json')\n      .send(existMeal1)\n      .expect(400);\n\n    expect(res.body.message)\n      .to.equal('Meal or this Meal Id already exist');\n  });\n  it('should not post a meal with existing meal name', async () => {\n    const res = await request(app)\n      .post('/api/v1/meals')\n      .set('Accept', 'application/json')\n      .send(existMeal2)\n      .expect(400);\n\n    expect(res.body.message)\n      .to.equal('Meal or this Meal Id already exist');\n  });\n  it('should post a new meal', async () => {\n    const res = await request(app)\n      .post('/api/v1/meals')\n      .set('Accept', 'application/json')\n      .send(meal)\n      .expect(201);\n    expect(res.body).to.be.an('object');\n    expect(res.body.meal).to.have.a.property('mealName');\n    expect(res.body.meal).to.have.a.property('mealId');\n    expect(res.body.meal).to.have.a.property('price');\n    expect(res.body.meal).to.have.a.property('description');\n    expect(res.body.meal).to.have.a.property('mealAvatar');\n  });\n});\n\ndescribe('PUT /api/meals/:mealId', () => {\n  it('should not edit meal if id does not exist', async () => {\n    const mealId = 18;\n    await request(app)\n      .put(`/api/v1/meals/${mealId}`)\n      .set('Accept', 'application/json')\n      .send(newMeal)\n      .expect(404);\n  });\n  it('should not edit meal if id does not exist', async () => {\n    const mealId = 1;\n    await request(app)\n      .put(`/api/v1/meals/${mealId}`)\n      .set('Accept', 'application/json')\n      .send(newMeal)\n      .expect(204);\n  });\n});\ndescribe('DELETE /api/v1/meals/:mealId', () => {\n  it('should not delete meal with invalid mealId', async () => {\n    const mealId = 5;\n    await request(app)\n      .delete(`/api/v1/meals/${mealId}`)\n      .set('Accept', 'application/json')\n      .expect(404);\n  });\n  it('should not delete meal with valid mealId', async () => {\n    const mealId = 1;\n    await request(app)\n      .delete(`/api/v1/meals/${mealId}`)\n      .set('Accept', 'application/json')\n      .expect(204);\n  });\n});\n"]}